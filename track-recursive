#!/bin/bash
# run on bash strict mode
set -euo pipefail
IFS=$'\n\t'

# read command line arguments
if [[ -z $1 || -z $2 ]]; then
    echo "Usage: track-recursive [pid] [sleep]" >&2
    echo "Monitor resource usage of a parent process and its child process recursively." \
        "Exit if no parent process running with PID=[pid]" >&2
    echo "(try \`track-recursive \$\$ 1\`)" >&2
    exit 1
else
    PID=$1
    SLEEP=$2
fi 

# check if PID is alive
CMD=$(ps -o command --no-headers --cols 9999 $PID)
if [[ -z $CMD ]]; then
    echo No process running with PID=$PID >&2
    exit 1
else
    
    echo "Tracking resource usage of PID=$PID and its child every $SLEEP second(s)." >&2
    echo -e "Command: $CMD" >&2
    echo -e "PID\tPPID\tSTATE\t%CPU\t%MEM\tCPU TIME\tELAPSED TIME\tDATE\tCMD"
fi

# check if stdout is terminal
if test -t 1; then
    COLORED=true
fi

function find_child () {
    local pid=$1
    # get self status
    local SELF=$(
        echo "$PS_OUT" | \
        awk \
            -v OFS='\t' \
            -v pid=$pid \
            -v MPID=$PID \
            -v DATE=$DATE \
            -v COLORED=$COLORED \
            '{
                if ($1 == pid) 
                {
                    if (COLORED) 
                    {
                        if ($1 == MPID) 
                        {
                            $1="\033[0;31m"$1"\033[0m";
                        }
                        if ($2 == MPID) 
                        {
                            $2="\033[0;31m"$2"\033[0m";
                        }
                        if ($3 == "R") 
                        {
                            $3="\033[0;32m"$3"\033[0m";
                        }    
                    }
                    print $1,$2,$3,$4,$5,$6,$7,DATE,$8;
                }
            }'
    )
    # report self status
    if [[ -n $SELF ]]; then
        echo -e "$SELF"
    else
        return 0
    fi

    # find childs
    local childs=$(
        echo "$PS_OUT" | \
        awk \
            -v pid=$pid \
            -v DATE=$DATE \
            -v TIME=$TIME \
            -v OFS='\t' \
            '$2 == pid {print $1}'
    )

    # trigger find_child for childs
    if [[ -n $childs ]]; then
        for c in $childs; do
            find_child $c
        done
    else
        return 0
    fi
}

# save the cursor position
tput sc
while :; do
    # check if the process is alive
    CHECK=$(ps --no-header -o pid $PID)
    if [[ -z $CHECK ]]; then
        echo No process running with PID=$PID >&2
        exit 0
    fi
    
    # clear to end of screen
    tput ed
    # restore the cursor position
    tput rc
    # get date/time
    DATE=$(date +%m-%d-%H:%M:%S)
    # ps
    PS_OUT=$(ps -o pid,ppid,state,%cpu,%mem,time,etime,ucmd ax)
    # find_child (recursively)
    find_child $PID
    # sleep
    sleep $SLEEP
    
done

